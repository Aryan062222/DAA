1. Write a program to Print Fibonacci Series using recursion.

def fibonacci(n):
    if n <= 1:
        return n
    else:
        return fibonacci(n-1) + fibonacci(n-2)
nterms = 10
if nterms <= 0:
    print("Please enter a positive integer")
else:
    print("Fibonacci sequence:")
    for i in range(nterms):
        print(fibonacci(i))


2. Write a program to check the given no is Armstrong or not using recursive function. 

def order(n):
    return len(str(n))
def is_armstrong(n, order):
    if n == 0:
        return 0
    else:
        return (n % 10) ** order + is_armstrong(n // 10, order)
num = int(input("Enter a number: "))
order_num = order(num)
if num == is_armstrong(num, order_num):
    print(num, "is an Armstrong number.")
else:
    print(num, "is not an Armstrong number.") 



3. Write a program to find the GCD of two numbers using recursive factorization

#include <stdio.h>
int gcd(int a, int b) {
    if (b == 0) {
        return a;
    }
    return gcd(b, a % b);
}
int main() {
    int num1, num2;
    printf("Enter two numbers: ");
    scanf("%d %d", &num1, &num2);
    printf("GCD of %d and %d is %d", num1, num2, gcd(num1, num2));
    return 0;
}


4. Write a program to get the largest element of an array.

def find_largest_element(arr):
    return max(arr)
array = [10, 5, 20, 8, 15]
largest_element = find_largest_element(array)
print(f'The largest element in the array is: {largest_element}')

5. Write a program to find the Factorial of a number using recursion.6. Write a program for to copy one string to another  using recursion

def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n-1)

number = 5
result = factorial(number)
print(f'The factorial of {number} is: {result}')

6. Write a program   to print the reverse of a string using recursion

def reverse_string(s):
    if len(s) == 0:
        return s
    else:
        return reverse_string(s[1:]) + s[0]

input_string = "Hello, World!"
reversed_string = reverse_string(input_string)
print("Original String:", input_string)
print("Reversed String:", reversed_string)

7. Write a program   to generate all the prime numbers using recursion

def is_prime(n, i=2):
    if n <= 2:
        return True if n == 2 else False
    if n % i == 0:
        return False
    if i * i > n:
        return True
    return is_prime(n, i + 1)

def generate_primes(n):
    if n > 1:
        generate_primes(n - 1)
        if is_prime(n):
            print(n)

8. 

def is_prime(num, i=2):
    if num <= 2:
        return num == 2
    if num % i == 0:
        return False
    if i * i > num:
        return True
    return is_prime(num, i + 1)

num = int(input("Enter a number: "))
if is_prime(num):
    print(num, "is a prime number")
else:
    print(num, "is not a prime number")







